generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  fullname          String
  username          String       @unique
  email             String       @unique
  password          String
  role              String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  menteeConnections Connection[] @relation("MenteeConnections")
  mentorConnections Connection[] @relation("MentorConnections")
  profile           Profile?
  menteeInSessions  Session[]    @relation("MenteeSession")
  mentorInSessions  Session[]    @relation("MentorSession")
  Message           Message[]
  sentMessages      Message[]    @relation("SentMessages")
}

model Profile {
  id             Int      @id @default(autoincrement())
  bio            String?
  location       String?
  linkedin       String?
  twitter        String?
  profilePicture String?
  experience     String?
  skills         String?
  availability   String?
  interests      String?
  learningGoals  String?
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Connection {
  id         Int       @id @default(autoincrement())
  mentorId   Int
  menteeId   Int
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  menteeUser User      @relation("MenteeConnections", fields: [menteeId], references: [id])
  mentorUser User      @relation("MentorConnections", fields: [mentorId], references: [id])
  messages   Message[]

  @@unique([mentorId, menteeId])
}

model Session {
  id          Int      @id @default(autoincrement())
  mentorId    Int
  menteeId    Int
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mentee      User     @relation("MenteeSession", fields: [menteeId], references: [id])
  mentor      User     @relation("MentorSession", fields: [mentorId], references: [id])
}

model Message {
  id           Int        @id @default(autoincrement())
  connectionId Int
  senderId     Int
  content      String
  read         Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  connection   Connection @relation(fields: [connectionId], references: [id])
  sender       User       @relation("SentMessages", fields: [senderId], references: [id])
  User         User?      @relation(fields: [userId], references: [id])
  userId       Int?
}
