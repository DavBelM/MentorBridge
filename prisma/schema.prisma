generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  name                 String?
  fullname             String?
  username             String?
  password             String?
  image                String?
  role                 String               @default("MENTEE")
  isActive             Boolean              @default(true)
  isApproved           Boolean              @default(false)
  submittedForApproval Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  mentorConnections    Connection[]         @relation("MentorConnections")
  menteeConnections    Connection[]         @relation("MenteeConnections")
  sentMessages         Message[]            @relation("SentMessages")
  receivedMessages     Message[]            @relation("ReceivedMessages")
  notifications        Notification[]
  profile              Profile?
  createdResources     Resource[]           @relation("CreatedResources")
  createdCollections   ResourceCollection[] @relation("CreatedCollections")
  progress             Progress[]
  mentorSessions       Session[]            @relation("MentorSessions")
  menteeSessions       Session[]            @relation("MenteeSessions")
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  bio            String?
  location       String?
  skills         String[] @default([])
  education      String[] @default([])
  availability   String?
  profilePicture String?
  linkedin       String?
  twitter        String?
  interests      String?
  learningGoals  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Connection {
  id        String    @id @default(cuid())
  mentorId  String
  menteeId  String
  status    String    @default("PENDING") // PENDING, ACCEPTED, REJECTED
  message   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mentor    User      @relation("MentorConnections", fields: [mentorId], references: [id])
  mentee    User      @relation("MenteeConnections", fields: [menteeId], references: [id])
  messages  Message[]
  sessions  Session[]

  @@unique([mentorId, menteeId])
}

model Message {
  id           String     @id @default(cuid())
  content      String
  senderId     String
  recipientId  String
  connectionId String
  read         Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sender       User       @relation("SentMessages", fields: [senderId], references: [id])
  recipient    User       @relation("ReceivedMessages", fields: [recipientId], references: [id])
  connection   Connection @relation(fields: [connectionId], references: [id])
}

model Session {
  id                 String     @id @default(cuid())
  title              String
  description        String?
  startTime          DateTime
  endTime            DateTime
  status             String     @default("PENDING") // PENDING, SCHEDULED, COMPLETED, CANCELLED, DECLINED
  location           String? 
  notes              String?
  feedback           String?
  cancellationReason String?
  connectionId       String
  mentorId           String 
  menteeId           String 
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  connection         Connection @relation(fields: [connectionId], references: [id])
  mentor             User       @relation("MentorSessions", fields: [mentorId], references: [id])
  mentee             User       @relation("MenteeSessions", fields: [menteeId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  type      String
  message   String
  entityId  String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Resource {
  id          String               @id @default(cuid())
  title       String
  description String?
  url         String
  type        String
  createdById String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   User                 @relation("CreatedResources", fields: [createdById], references: [id])
  collections ResourceCollection[]
}

model ResourceCollection {
  id          String     @id @default(cuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("CreatedCollections", fields: [createdById], references: [id])
  resources   Resource[]
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  type      String
  score     Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model PlatformSettings {
  id                    Int      @id @default(1)
  allowNewRegistrations Boolean  @default(true)
  requireMentorApproval Boolean  @default(true)
  maxSessionsPerWeek    Int      @default(5)
  sessionDuration       Int      @default(60)
  maintenanceMode       Boolean  @default(false)
  siteName              String   @default("MentorBridge")
  contactEmail          String   @default("support@mentorbridge.com")
  updatedAt             DateTime @updatedAt
  createdAt             DateTime @default(now())
}
